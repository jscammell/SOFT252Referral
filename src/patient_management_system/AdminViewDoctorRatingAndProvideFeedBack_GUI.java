/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package patient_management_system;

import User.Users;
import User.getData;
import User.Doctor;
import java.util.ArrayList;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JPanel;
import java.awt.FlowLayout;
import java.awt.event.*;
import javax.swing.*;
import java.io.BufferedWriter;
import java.io.FileWriter;


/**
 *
 * @author Josh
 */
public class AdminViewDoctorRatingAndProvideFeedBack_GUI extends javax.swing.JFrame {

    /**
     * Creates new form DoctorRating_GUI
     */
    public AdminViewDoctorRatingAndProvideFeedBack_GUI() {
        initComponents();
        getData Data = new getData();
        ArrayList<Users> doctors = new ArrayList<Users>();
        try{
        Data.readDoctors(doctors);
        }
        catch(Exception e) {
        e.printStackTrace();
        }
        Object[] aDoctors = doctors.toArray();
        int length;
        length = aDoctors.length;
        String[] doctor_Name = new String[length+1];
        doctor_Name[0] = "Select";
        java.util.List<String> list = new java.util.ArrayList<String>();
        for (int i=0; i < length; i++) {
        String name = ((User.Doctor)aDoctors[i]).getFirst_Name();
        doctor_Name[i+1] = name;
        }
        final DefaultComboBoxModel model = new DefaultComboBoxModel (doctor_Name);
        final  DefaultComboBoxModel modela = new DefaultComboBoxModel (doctor_Name);
        JPanel panel = new JPanel();

        cmbViewDoctor.setModel(model);
        cmbRateDoctor.setModel(model);
        
        
        cmbViewDoctor.addActionListener(new ActionListener(){
            public void actionPerformed(ActionEvent event) {
                String cmbDoctors_Name = cmbViewDoctor.getSelectedItem().toString();
        
                try{
                    boolean docTrue = false;
                    txtPatientFeedback.setText("");
                    for (int i = 0; i < length; i++) {
                        int ratingLength = ((User.Doctor)aDoctors[i]).getRatingsLength();
                        int[] rating = new int[ratingLength];
                        rating = ((User.Doctor)aDoctors[i]).getRatings();
        
                        while(cmbDoctors_Name.equals(((User.Doctor)aDoctors[i]).getFirst_Name())){
                            int meanRating = 0;
                            for (int k = 0; k < ratingLength; k++) {
                                int ratings = rating[k];
                                meanRating = meanRating + ratings;        
                            }
                            meanRating = meanRating / ratingLength;
                            docTrue = true;
                            txtViewRating.setText(String.valueOf(meanRating));
                            
                            String[] description = new String[ratingLength];
                            description = ((User.Doctor)aDoctors[i]).getDescription();
                           
                            
                            
                            for (int k = 0; k < ratingLength; k++) {                           
                                
                            
                            txtPatientFeedback.append(description[k].toString());
                            txtPatientFeedback.append("\n");
                            
                            
                            }
                            
                            break;
                        }
                        if(Boolean.TRUE.equals(docTrue)){
                            break;
                        }
                
                    }
                }
                catch(Exception e) {
                e.printStackTrace();
                }
            }
        });
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cmbRateDoctor = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        txtDescription = new javax.swing.JTextField();
        btnBack = new javax.swing.JButton();
        btnSubmit = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        cmbViewDoctor = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtViewRating = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtPatientFeedback = new javax.swing.JTextArea();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Doctor Rating");

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Rate Doctor");

        cmbRateDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel3.setText("Please Choose A Doctor To Rate");

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });

        jLabel5.setText("Description For Given Rating");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel6.setText("View Doctor Rating");

        cmbViewDoctor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel7.setText("Please Choose A Doctor To View Rating");

        jLabel4.setText("Average Doctor Rating");

        txtPatientFeedback.setColumns(20);
        txtPatientFeedback.setRows(5);
        jScrollPane1.setViewportView(txtPatientFeedback);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel8.setText("Patient feedback on Doctor");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(142, 142, 142)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cmbViewDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(0, 143, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(txtViewRating)
                            .addComponent(txtDescription)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(cmbRateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 196, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbViewDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel4)
                .addGap(4, 4, 4)
                .addComponent(txtViewRating, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbRateDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDescription, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSubmit)
                    .addComponent(btnBack))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        Administrator_GUI open = new Administrator_GUI();
        open.setVisible(true);
        this.setVisible(false);
        this.dispose();
        
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSubmitActionPerformed
        getData Data = new getData();
        ArrayList<Users> doctors = new ArrayList<Users>();
        try{
            Data.readDoctorFeedback(doctors);       
        }
        catch(Exception e){
            e.printStackTrace();
        }
        Object[] aDoctor = doctors.toArray();
        int length;
        length = aDoctor.length;
       
        String description;
        int rating;
        boolean isNotEmpty = false;
       
        
        if(txtDescription != null){
            description = txtDescription.getText();
            isNotEmpty = true;
        }
        else{
            description = null;
            isNotEmpty = false;
            rating = 0;
        }
        String cmbDoctorName = cmbRateDoctor.getSelectedItem().toString();
        if(Boolean.TRUE.equals(isNotEmpty)){
            
            for (int i = 0; i < length+1; i++) {
                if(length != 0){
               if(cmbDoctorName.equals(((User.Doctor)aDoctor[i]).getFirst_Name()) ){ 
                    int ratingLength = ((User.Doctor)aDoctor[i]).getRatingsLength();
                        while(cmbDoctorName.equals(((User.Doctor)aDoctor[i]).getFirst_Name())){
                
                
                        String[] descriptions = ((User.Doctor)aDoctor[i]).getDescription();
                        String[] newDescriptions = new String[ratingLength + 1];                
           
                        for (int j = 0; j < ratingLength; j++) {
                            newDescriptions[j] = descriptions[j];
                        }
                        newDescriptions[ratingLength] = description;
                        ((User.Doctor)aDoctor[i]).setDescription(newDescriptions);                
                        ratingLength = ratingLength + 1;
                        ((User.Doctor)aDoctor[i]).setRatingsLength(ratingLength);
                        break;           
                        }
            
                        try{
                            BufferedWriter clear = new BufferedWriter(new FileWriter("./accounts\\DoctorFeedback.txt",false));
                            clear.newLine();
                        }
                        catch(Exception e){
                            e.printStackTrace();
                        }
           
                        for (int l = 0; l < length; l++) {
                            aDoctor = doctors.toArray();
                            String userId = ((User.Doctor)aDoctor[l]).getUserId();
                            String aPassword = ((User.Doctor)aDoctor[l]).getPassword();
                            String first_Name = ((User.Doctor)aDoctor[l]).getFirst_Name();
                            String last_Name = ((User.Doctor)aDoctor[l]).getLast_Name();                            
                            String feedback = txtDescription.getText();
           
                            try{
                                BufferedWriter out = new BufferedWriter(new FileWriter("./accounts\\DoctorFeedback.txt",true));
                                out.newLine();
                                out.write(userId);
                                out.newLine();                    
                                out.write(first_Name);
                                out.newLine();                    
                                out.write(String.valueOf(ratingLength));
                                out.newLine();
                                
                                
                    
                                for (int k = 0; k < ratingLength; k++) {
                                    String[] descriptions = ((User.Doctor)aDoctor[k]).getDescription();
                                    out.write(descriptions[k]);
                                    out.newLine();
                                }
                    
           
                            out.close();
                            }    
                            catch(Exception e) {
                                e.printStackTrace();
                            }           
           
                        }
           
           
                    }
                }
                else if(length == 0){
                 
                    ArrayList<Users> doctors2 = new ArrayList<Users>();
                    try{
                        Data.readDoctors(doctors2);       
                    }
                    catch(Exception e){
                        e.printStackTrace();
                    }
                    Object[] aDoctor2 = doctors2.toArray();
                    int length2;
                    length2 = aDoctor2.length;
                    for (int l = 0; l < length2; l++) {
                            if(cmbDoctorName.equals(((User.Doctor)aDoctor2[l]).getFirst_Name())){ 
                                
                                String[] newDoctor = new String[length+1];
                                
                                aDoctor = doctors.toArray();
                                String userId = ((User.Doctor)aDoctor2[l]).getUserId();
                                String aPassword = ((User.Doctor)aDoctor2[l]).getPassword();
                                String first_Name = ((User.Doctor)aDoctor2[l]).getFirst_Name();
                                String last_Name = ((User.Doctor)aDoctor2[l]).getLast_Name();
                                int ratingLength = 1;
                                String[] descriptions = new String[1];
                                descriptions[0] =  txtDescription.getText();
                                
                                String feedback = txtDescription.getText();
                                
                        
                        
            
                        try{
                            BufferedWriter clear = new BufferedWriter(new FileWriter("./accounts\\DoctorFeedback.txt",false));
                            clear.newLine();
                        }
                        catch(Exception e){
                            e.printStackTrace();
                        }
           
                        
           
           
                            try{
                                BufferedWriter out = new BufferedWriter(new FileWriter("./accounts\\DoctorFeedback.txt",true));
                                out.newLine();
                                out.write(userId);
                                out.newLine();                    
                                out.write(first_Name);
                                out.newLine();                    
                                out.write(String.valueOf(ratingLength));
                                out.newLine();
                                
           
                                
                    
                                for (int k = 0; k < ratingLength; k++) {
                                    
                                    out.write(descriptions[k]);
                                    out.newLine();
                                }
                    
           
                            out.close();
                            }    
                            catch(Exception e) {
                                e.printStackTrace();
                            }           
           
                        }
                    }
                }
               
               }
        }
    }//GEN-LAST:event_btnSubmitActionPerformed

   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JComboBox<String> cmbRateDoctor;
    private javax.swing.JComboBox<String> cmbViewDoctor;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtDescription;
    private javax.swing.JTextArea txtPatientFeedback;
    private javax.swing.JTextField txtViewRating;
    // End of variables declaration//GEN-END:variables
}
